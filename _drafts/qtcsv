---
title: qtcsv: working with csv-files in Qt
layout: default
author:
  name: Antony Cherepanov
  url: {{ site.url }}
---

About a year ago I worked on my home-project that was related to image
compression. I used my favorite framework - Qt - and things were going
well.

Until I didn't have to plot some statistics data. If I were used Python,
I would just import [matplotlib][1] library, add several lines of code
and - whoop - get neat diagrams! But I used C++ and Qt. And I didn't want
to make this task too complicated. So I decided that the simplest way
for me was to export my data to [csv-file][2], open it with Microsoft
Excel or LibreOffice Calc and create plots.

I don't intend to describe here the last part of this task - creation of
plots in the office suite. There are bunch of good articles and videos
on this topic [in the Internet][3]. Intead I want to concentrate on the
csv-stuff: how to read and write csv files using Qt.

Ok, let's define our task in more detail. For example, we have a list of
[pixel][4] objects and we want to create a [histograms][5] for each
component of those pixels. Each pixel have three channels: red, green and
blue. So this data could be represented as this table:

| red | green | blue |
| --- | ----- | ---- |
|  11 |   255 |    0 |
| 167 |   209 |   89 |
|  34 |    55 |   12 |
| ... | ..... | .... |

How we can export this table to csv-file? First of all, let's see what is
a csv-file. csv-file is a text file with quite a simple structure. Each
line in such file interpreted as a single row of a table. Elements (or
cell values) in the each row are separated with separator symbol (comma
or tab or any other separator). So our table in csv-file will looks like
this (with comma as separator symbol):

``` text
red,green,blue
11,255,0
167,209,89
34,55,12
...
```

Good. Next question - how to create such file programmatically? No
problem, here is the answer. Create new Qt project and copy this text
to .pro file:

``` qmake
QT       += core gui

# set name of you project
TARGET = ProjectName
CONFIG   += console
CONFIG   -= app_bundle
TEMPLATE = app
SOURCES += main.cpp
```

Copy this code to main.cpp file:

``` cpp
#include <QApplication>
#include <QList>
#include <QColor>
#include <QString>
#include <QStringList>
#include <QFile>
#include <QTextStream>

QList<QRgb> GetPixels()
{
    QList<QRgb> pixels;
    pixels << qRgb(11, 255, 0) << qRgb(167, 209, 89) << qRgb(34, 55, 12);

    return pixels;
}

QList<QStringList> PixelsToStrings(const QList<QRgb>& pixels)
{
    QList<QStringList> strings;
    for (int i = 0; i < pixels.size(); ++i)
    {
        QStringList values;
        values << QString::number(qRed(pixels.at(i))) <<
                  QString::number(qGreen(pixels.at(i))) <<
                  QString::number(qBlue(pixels.at(i)));
        
        strings << values;
    }

    return strings;

}

void WriteToCSV(const QList<QStringList>& pixels)
{
    // Open csv-file
    QFile file("pixels.csv");
    file.open(QIODevice::Append | QIODevice::Text);

    // Write data to file
    QTextStream stream(&file);
    QString separator(",");
    for (int i = 0; i < pixels.size(); ++i)
    {
        stream << pixels.at(i).join(separator) << endl;
    }

    stream.flush();
    file.close();
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QList<QRgb> pixels = GetPixels();
    QList<QStringList> pixelsStr = PixelsToStrings(pixels);
    WriteToCSV(pixelsStr);

    return a.exec();
}
```

Code, that create and write csv-file is located in function WriteToCSV().
It's very short, as you see. If you compile this project and run it,
in project folder (or in build folder) will be created file with name
*pixels.csv*. You can open it with your favourite text editor, you will
see the desired numbers.

Congratilations! Our task is complete and I can end my post... oh yes,
I forgot that I promised you to tell about reading csv-files. Ok, I'll
tell. Reading of the csv-file isn't a difficult task (also).
Here is the code:

``` cpp
QList<QStringList> ReadCSVFile()
{
    // Open csv-file
    QFile file("myfile.csv");
    file.open(QIODevice::ReadOnly | QIODevice::Text);

    // Read data from file
    QTextStream stream(&file);
    QList<QStringList> data;
    QString separator(",");
    while (stream.atEnd() == false)
    {
        QString line = stream.readLine();
        data << line.split(separator);
    }

    file.close();
    return data;
}
```

You can use csv-files as a method to export data from your program
and as a method to import data to your program.

Code that I posted here for reading and writing csv-files is Ok.
But it have some drawbacks.

1. Read/write functions are not flexible. I mean, 

[1]: http://matplotlib.org/
[2]: http://en.wikipedia.org/wiki/Comma-separated_values
[3]: http://lmgtfy.com/?q=how+to+create+plots+in+excel
[4]: https://en.wikipedia.org/wiki/Pixel
[5]: https://en.wikipedia.org/wiki/Histogram
