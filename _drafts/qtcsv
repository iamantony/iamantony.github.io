---
title: qtcsv: working with csv-files in Qt
layout: default
author:
  name: Antony Cherepanov
  url: {{ site.url }}
---

About a year ago I worked on my home-project that was related to image
compression. I used my favorite framework - Qt - and things were going
well.

Until I didn't have to plot some statistics data. If I were used Python,
I would just import [matplotlib][1] library, add several lines of code
and - whoop - get neat diagrams! But I used C++ and Qt. And I didn't want
to make this task too complicated. So I decided that the simplest way
for me was to export my data to [csv-file][2], open it with Microsoft
Excel or LibreOffice Calc and create plots.

I don't intend to describe here the last part of this task - creation of
plots in the office suite. There are bunch of good articles and videos
on this topic [in the Internet][3]. Instead I want to concentrate on the
csv-stuff: how to read and write csv files using Qt.

Ok, let's define our task in more detail. For example, we have a list of
[pixel][4] objects and we want to create a [histograms][5] for each
component of those pixels. Each pixel have three channels: red, green and
blue. So this data could be represented as this table:

| red | green | blue |
| --- | ----- | ---- |
|  11 |   255 |    0 |
| 167 |   209 |   89 |
|  34 |    55 |   12 |
| ... | ..... | .... |

How we can export such table to csv-file? First of all, let's see what is
a csv-file. csv-file is a text file with quite a simple structure. Each
line in csv-file is file interpreted as a single row of a table. Elements
(or cell values) in the each row are separated with separator symbol (comma
or tab or any other separator, even "avb!@;;"). So our table in csv-file
will looks like this (with comma as separator symbol):

``` text
red,green,blue
11,255,0
167,209,89
34,55,12
...
```

Good. Next question - how to create such file programmatically? No
problem, all the necessary code you'll find in this example project:

https://github.com/iamantony/csv-read-write-example

Here is the code from main.cpp file:

``` cpp
#include <QList>
#include <QColor>
#include <QString>
#include <QStringList>
#include <QFile>
#include <QTextStream>
#include <QDebug>

QList<QRgb> GetPixels()
{
    QList<QRgb> pixels;
    pixels << qRgb(11, 255, 0) << qRgb(167, 209, 89) << qRgb(34, 55, 12);

    return pixels;
}

QList<QStringList> PixelsToStrings(const QList<QRgb>& pixels)
{
    QList<QStringList> strings;
    for (int i = 0; i < pixels.size(); ++i)
    {
        QStringList values;
        values << QString::number(qRed(pixels.at(i))) <<
                  QString::number(qGreen(pixels.at(i))) <<
                  QString::number(qBlue(pixels.at(i)));

        strings << values;
    }

    return strings;

}

void WriteToCSV(const QList<QStringList>& pixels)
{
    // Open csv-file
    QFile file("pixels.csv");
    file.open(QIODevice::Append | QIODevice::Text);

    // Write data to file
    QTextStream stream(&file);
    QString separator(",");
    for (int i = 0; i < pixels.size(); ++i)
    {
        stream << pixels.at(i).join(separator) << endl;
    }

    stream.flush();
    file.close();
}

QList<QStringList> ReadCSV()
{
    // Open csv-file
    QFile file("pixels.csv");
    file.open(QIODevice::ReadOnly | QIODevice::Text);

    // Read data from file
    QTextStream stream(&file);
    QList<QStringList> data;
    QString separator(",");
    while (stream.atEnd() == false)
    {
        QString line = stream.readLine();
        data << line.split(separator);
    }

    file.close();
    return data;
}

void Print(const QList<QStringList>& data)
{
    for (int i = 0; i < data.size(); ++i)
    {
        qDebug() << data.at(i).join(", ");
    }
}

int main()
{
    QList<QRgb> pixels = GetPixels();
    QList<QStringList> pixelsStr = PixelsToStrings(pixels);
    WriteToCSV(pixelsStr);

    QList<QStringList> readData = ReadCSV();
    Print(readData);

    return 0;
}
```

Code, that create and write csv-file is located in function WriteToCSV().
It's very short, as you see. If you compile this project and run it,
in project folder (or in build folder) will be created file with name
*pixels.csv*. You can open it with your favourite text editor, you will
see the desired numbers.

Reading of the csv-file isn't a difficult task (also). In function
ReadCSV() we open csv-file, read it line by line and split these
lines by separator symbol. As the output we get list of lists of
strings - elements of the table.

You can use csv-files as a method to *export* data from your program
and as a method to *import* data into your program. Very useful!

Code that I posted here for reading and writing csv-files is Ok.
But it have some drawbacks.

1. Use only one type of data - strings. I mean, functions use list of
strings as output/input objects, so before using these functions
you must transform your data (it could be integers, floats or other
complex objects) to strings by yourself.

2. High memory consumption.
    1. When you read the csv-file, all it's content will be loaded
    to the memory. It's Ok when file is small, but what if it has
    hundreds of thousands of lines? It's highly possible that
    eventually you'll run out of memory and your program will crush.
    2. When you write to the csv-file all your data primarily will
    be converted to strings. So in memory you'll have two identical
    copies of your data. After that when you stream your data to the
    file it will be at first saved to some string buffer, checked,
    converted and only after that will be written to the file.
    
3. Parameters of the file are hardcoded. It's name, open mode, type
of separator and so on. If you want to change some of them, you'll
have to manually amend code and recompile your program.

To eliminate this drawbacks (well, most of themn) I wrote small
library - **[qtcsv][6]**. It has class **Reader** that can read
csv-files. It has class **Writer** that can wrtie csv-files.
Also it has several container classes for data that is going to
be written to csv-file. Please see [*Readme* file][7] for
more detailed information about interfaces of the library.

Here I'll show you quick example of usage of qtcsv library:

```cpp
#include <QList>
#include <QStringList>
#include <QDir>
#include <QDebug>

#include "stringdata.h"
#include "reader.h"
#include "writer.h"

int main()
{
    // prepare data that you want to save to csv-file
    QStringList strList;
    strList << "one" << "two" << "three";

    QtCSV::StringData strData;
    strData.addRowValues(strList);
    strData.addEmptyRow();
    strData << strList << "this is the last row";

    // write to file
    QString filePath = QDir::currentPath() + "/test.csv";
    QtCSV::Writer::write(filePath, strData);

    // read data from file
    QList<QStringList> readData = QtCSV::Reader::readToList(filePath);
    for ( int i = 0; i < readData.size(); ++i )
    {
        qDebug() << readData.at(i).join(",");
    }

    return 0;
}
```

[1]: http://matplotlib.org/
[2]: http://en.wikipedia.org/wiki/Comma-separated_values
[3]: http://lmgtfy.com/?q=how+to+create+plots+in+excel
[4]: https://en.wikipedia.org/wiki/Pixel
[5]: https://en.wikipedia.org/wiki/Histogram
[6]: https://github.com/iamantony/qtcsv
[7]: https://github.com/iamantony/qtcsv/blob/master/README.md
