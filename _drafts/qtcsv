---
title: qtcsv library: working with csv-files
layout: default
author:
  name: Antony Cherepanov
  url: {{ site.url }}
---

About a year ago I worked on my home-project that was related to image
compression. I used my favorite framework - Qt - and things were going
well.

Until I didn't have to plot some statistics data. If I were used Python,
I would just import [matplotlib][1] library, add several lines of code
and - whoop - get neat diagrams! But I used C++ and Qt. And I didn't want
to make this task too complicated. So I decided that the simplest way
for me was to export my data to [csv-file][2], open it with Microsoft
Excel or LibreOffice Calc and create plots. Ok, let's do it!

First of all, let's see what is a csv-file. csv-file is a text file with
quite a simple structure. Each line in such file interpreted as a single
row of a table. Elements (or cell values) in the each row are separated
with separator symbol (comma or tab or any other separator).

Next, let's define our task. For example, we have a list of [pixel][3]
objects and we want to create a [histograms][4] for each component of
those pixels. Each pixel have three channels: red, green and blue. So
this data could be represented as this table:

| red | green | blue |
| --- | ----- | ---- |
|  11 |   255 |    0 |
| 167 |   209 |   89 |
|  34 |    55 |   12 |
| ... | ..... | .... |

If we will export this data to csv-file, it will looks like this:

``` text
red,green,blue
11,255,0
167,209,89
34,55,12
...
```

Here we use comma as elements separator.

To write such csv-file, create new Qt project. Copy to .pro file:

``` qmake
QT       += core gui

# set name of you project
TARGET = ProjectName
CONFIG   += console
CONFIG   -= app_bundle
TEMPLATE = app
SOURCES += main.cpp
```

Copy to main.cpp file:

``` cpp
#include <QApplication>
#include <QList>
#include <QColor>
#include <QString>
#include <QStringList>
#include <QFile>
#include <QTextStream>

QList<QRgb> GetPixels()
{
    QList<QRgb> pixels;
    pixels << qRgb(11, 255, 0) << qRgb(167, 209, 89) << qRgb(34, 55, 12);

    return pixels;
}

QStringList PixelToStrings(const QRgb& pixel)
{
    QStringList values;
    values << QString::number(qRed(pixel)) <<
              QString::number(qGreen(pixel)) <<
              QString::number(qBlue(pixel));

    return values;

}

void WriteToCSV(const QList<QRgb>& pixels)
{
    // Open csv-file
    QFile file("pixels.csv");
    file.open(QIODevice::Append | QIODevice::Text);

    // Write data to file
    QTextStream stream(&file);
    QString separator(",");
    for (int i = 0; i < pixels.size(); ++i)
    {
        QStringList pixelStr = PixelToStrings(pixels.at(i));
        stream << pixelStr.join(separator) << endl;
    }

    stream.flush();
    file.close();
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QList<QRgb> pixels = GetPixels();
    WriteToCSV(pixels);

    return a.exec();
}
```

Code, that create and write csv-file is located in function WriteToCSV().
It's very short, as you see. If you compile this project and run it,
in project folder (or in build folder) will be created *pixels.csv* file.
You can open it with your favourite text editor, you will see the desired
numbers.

Reading of the csv-file is also not a difficult task. Here is the code:

``` cpp
QList<QStringList> ReadCSVFile()
{
    // Open csv-file
    QFile file("myfile.csv");
    file.open(QIODevice::ReadOnly | QIODevice::Text);

    // Read data from file
    QTextStream stream(&file);
    QList<QStringList> data;
    QString separator(",");
    while (stream.atEnd() == false)
    {
        QString line = stream.readLine();
        data << line.split(separator);
    }

    file.close();
    return data;
}
```


[1]: http://matplotlib.org/
[2]: http://en.wikipedia.org/wiki/Comma-separated_values
[3]: https://en.wikipedia.org/wiki/Pixel
[4]: https://en.wikipedia.org/wiki/Histogram
